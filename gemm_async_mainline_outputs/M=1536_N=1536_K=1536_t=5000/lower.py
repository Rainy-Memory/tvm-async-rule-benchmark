# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer[(1536, 1536), "float32"], B: T.Buffer[(1536, 1536), "float32"], Y: T.Buffer[(1536, 1536), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # var definition
        threadIdx_x = T.env_thread("threadIdx.x")
        blockIdx_x = T.env_thread("blockIdx.x")
        # buffer definition
        A_1 = T.buffer_decl([2359296], dtype="float32", data=A.data)
        B_1 = T.buffer_decl([2359296], dtype="float32", data=B.data)
        Y_1 = T.buffer_decl([2359296], dtype="float32", data=Y.data)
        # body
        T.launch_thread(blockIdx_x, 384)
        Y_local = T.allocate([96], "float32", "local")
        Y_local_1 = T.buffer_decl([36], dtype="float32", data=Y_local, scope="local")
        A_shared = T.allocate([6144], "float32", "shared")
        A_shared_1 = T.buffer_decl([6144], dtype="float32", data=A_shared, scope="shared")
        B_shared = T.allocate([4096], "float32", "shared")
        B_shared_1 = T.buffer_decl([4096], dtype="float32", data=B_shared, scope="shared")
        T.launch_thread(threadIdx_x, 64)
        for j_3_init in T.serial(2):
            Y_local_1[j_3_init] = T.float32(0)
            Y_local_1[j_3_init + 6] = T.float32(0)
            Y_local_1[j_3_init + 12] = T.float32(0)
            Y_local_1[j_3_init + 18] = T.float32(0)
            Y_local_1[j_3_init + 24] = T.float32(0)
            Y_local_1[j_3_init + 30] = T.float32(0)
            Y_local_1[j_3_init + 36] = T.float32(0)
            Y_local_1[j_3_init + 42] = T.float32(0)
            Y_local_1[j_3_init + 48] = T.float32(0)
            Y_local_1[j_3_init + 54] = T.float32(0)
            Y_local_1[j_3_init + 60] = T.float32(0)
            Y_local_1[j_3_init + 66] = T.float32(0)
            Y_local_1[j_3_init + 72] = T.float32(0)
            Y_local_1[j_3_init + 78] = T.float32(0)
            Y_local_1[j_3_init + 84] = T.float32(0)
            Y_local_1[j_3_init + 90] = T.float32(0)
            Y_local_1[j_3_init + 2] = T.float32(0)
            Y_local_1[j_3_init + 8] = T.float32(0)
            Y_local_1[j_3_init + 14] = T.float32(0)
            Y_local_1[j_3_init + 20] = T.float32(0)
            Y_local_1[j_3_init + 26] = T.float32(0)
            Y_local_1[j_3_init + 32] = T.float32(0)
            Y_local_1[j_3_init + 38] = T.float32(0)
            Y_local_1[j_3_init + 44] = T.float32(0)
            Y_local_1[j_3_init + 50] = T.float32(0)
            Y_local_1[j_3_init + 56] = T.float32(0)
            Y_local_1[j_3_init + 62] = T.float32(0)
            Y_local_1[j_3_init + 68] = T.float32(0)
            Y_local_1[j_3_init + 74] = T.float32(0)
            Y_local_1[j_3_init + 80] = T.float32(0)
            Y_local_1[j_3_init + 86] = T.float32(0)
            Y_local_1[j_3_init + 92] = T.float32(0)
            Y_local_1[j_3_init + 4] = T.float32(0)
            Y_local_1[j_3_init + 10] = T.float32(0)
            Y_local_1[j_3_init + 16] = T.float32(0)
            Y_local_1[j_3_init + 22] = T.float32(0)
            Y_local_1[j_3_init + 28] = T.float32(0)
            Y_local_1[j_3_init + 34] = T.float32(0)
            Y_local_1[j_3_init + 40] = T.float32(0)
            Y_local_1[j_3_init + 46] = T.float32(0)
            Y_local_1[j_3_init + 52] = T.float32(0)
            Y_local_1[j_3_init + 58] = T.float32(0)
            Y_local_1[j_3_init + 64] = T.float32(0)
            Y_local_1[j_3_init + 70] = T.float32(0)
            Y_local_1[j_3_init + 76] = T.float32(0)
            Y_local_1[j_3_init + 82] = T.float32(0)
            Y_local_1[j_3_init + 88] = T.float32(0)
            Y_local_1[j_3_init + 94] = T.float32(0)
        with T.attr(0, "async_commit_queue_scope", 0):
            with T.attr(0, "async_scope", 1):
                A_shared_1[threadIdx_x * 4:threadIdx_x * 4 + 4] = A_1[blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4:blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 4]
                A_shared_1[threadIdx_x * 4 + 256:threadIdx_x * 4 + 256 + 4] = A_1[blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 24576:blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 24576 + 4]
                A_shared_1[threadIdx_x * 4 + 512:threadIdx_x * 4 + 512 + 4] = A_1[blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 49152:blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 49152 + 4]
                A_shared_1[threadIdx_x * 4 + 768:threadIdx_x * 4 + 768 + 4] = A_1[blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 73728:blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 73728 + 4]
                A_shared_1[threadIdx_x * 4 + 1024:threadIdx_x * 4 + 1024 + 4] = A_1[blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 98304:blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 98304 + 4]
                A_shared_1[threadIdx_x * 4 + 1280:threadIdx_x * 4 + 1280 + 4] = A_1[blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 122880:blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 122880 + 4]
            T.attr(0, "async_scope", 1)
            B_shared_1[threadIdx_x * 4:threadIdx_x * 4 + 4] = B_1[threadIdx_x // 16 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 16 * 4:threadIdx_x // 16 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 16 * 4 + 4]
            B_shared_1[threadIdx_x * 4 + 256:threadIdx_x * 4 + 256 + 4] = B_1[threadIdx_x // 16 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 16 * 4 + 6144:threadIdx_x // 16 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 16 * 4 + 6144 + 4]
            B_shared_1[threadIdx_x * 4 + 512:threadIdx_x * 4 + 512 + 4] = B_1[threadIdx_x // 16 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 16 * 4 + 12288:threadIdx_x // 16 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 16 * 4 + 12288 + 4]
            B_shared_1[threadIdx_x * 4 + 768:threadIdx_x * 4 + 768 + 4] = B_1[threadIdx_x // 16 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 16 * 4 + 18432:threadIdx_x // 16 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 16 * 4 + 18432 + 4]
        with T.attr(0, "async_commit_queue_scope", 0):
            with T.attr(0, "async_scope", 1):
                A_shared_1[threadIdx_x * 4 + 1536:threadIdx_x * 4 + 1536 + 4] = A_1[blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 16:blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 16 + 4]
                A_shared_1[threadIdx_x * 4 + 1792:threadIdx_x * 4 + 1792 + 4] = A_1[blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 24592:blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 24592 + 4]
                A_shared_1[threadIdx_x * 4 + 2048:threadIdx_x * 4 + 2048 + 4] = A_1[blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 49168:blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 49168 + 4]
                A_shared_1[threadIdx_x * 4 + 2304:threadIdx_x * 4 + 2304 + 4] = A_1[blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 73744:blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 73744 + 4]
                A_shared_1[threadIdx_x * 4 + 2560:threadIdx_x * 4 + 2560 + 4] = A_1[blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 98320:blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 98320 + 4]
                A_shared_1[threadIdx_x * 4 + 2816:threadIdx_x * 4 + 2816 + 4] = A_1[blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 122896:blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 122896 + 4]
            T.attr(0, "async_scope", 1)
            B_shared_1[threadIdx_x * 4 + 1024:threadIdx_x * 4 + 1024 + 4] = B_1[threadIdx_x // 16 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 16 * 4 + 24576:threadIdx_x // 16 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 16 * 4 + 24576 + 4]
            B_shared_1[threadIdx_x * 4 + 1280:threadIdx_x * 4 + 1280 + 4] = B_1[threadIdx_x // 16 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 16 * 4 + 30720:threadIdx_x // 16 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 16 * 4 + 30720 + 4]
            B_shared_1[threadIdx_x * 4 + 1536:threadIdx_x * 4 + 1536 + 4] = B_1[threadIdx_x // 16 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 16 * 4 + 36864:threadIdx_x // 16 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 16 * 4 + 36864 + 4]
            B_shared_1[threadIdx_x * 4 + 1792:threadIdx_x * 4 + 1792 + 4] = B_1[threadIdx_x // 16 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 16 * 4 + 43008:threadIdx_x // 16 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 16 * 4 + 43008 + 4]
        with T.attr(0, "async_commit_queue_scope", 0):
            with T.attr(0, "async_scope", 1):
                A_shared_1[threadIdx_x * 4 + 3072:threadIdx_x * 4 + 3072 + 4] = A_1[blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 32:blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 32 + 4]
                A_shared_1[threadIdx_x * 4 + 3328:threadIdx_x * 4 + 3328 + 4] = A_1[blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 24608:blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 24608 + 4]
                A_shared_1[threadIdx_x * 4 + 3584:threadIdx_x * 4 + 3584 + 4] = A_1[blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 49184:blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 49184 + 4]
                A_shared_1[threadIdx_x * 4 + 3840:threadIdx_x * 4 + 3840 + 4] = A_1[blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 73760:blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 73760 + 4]
                A_shared_1[threadIdx_x * 4 + 4096:threadIdx_x * 4 + 4096 + 4] = A_1[blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 98336:blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 98336 + 4]
                A_shared_1[threadIdx_x * 4 + 4352:threadIdx_x * 4 + 4352 + 4] = A_1[blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 122912:blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + threadIdx_x % 4 * 4 + 122912 + 4]
            T.attr(0, "async_scope", 1)
            B_shared_1[threadIdx_x * 4 + 2048:threadIdx_x * 4 + 2048 + 4] = B_1[threadIdx_x // 16 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 16 * 4 + 49152:threadIdx_x // 16 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 16 * 4 + 49152 + 4]
            B_shared_1[threadIdx_x * 4 + 2304:threadIdx_x * 4 + 2304 + 4] = B_1[threadIdx_x // 16 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 16 * 4 + 55296:threadIdx_x // 16 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 16 * 4 + 55296 + 4]
            B_shared_1[threadIdx_x * 4 + 2560:threadIdx_x * 4 + 2560 + 4] = B_1[threadIdx_x // 16 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 16 * 4 + 61440:threadIdx_x // 16 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 16 * 4 + 61440 + 4]
            B_shared_1[threadIdx_x * 4 + 2816:threadIdx_x * 4 + 2816 + 4] = B_1[threadIdx_x // 16 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 16 * 4 + 67584:threadIdx_x // 16 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 16 * 4 + 67584 + 4]
        for k_0_fused in T.serial(93):
            cse_var_1: T.int32 = (k_0_fused + 3) % 4
            with T.attr(0, "async_commit_queue_scope", 0):
                with T.attr(0, "async_scope", 1):
                    A_shared_1[cse_var_1 * 1536 + threadIdx_x * 4:cse_var_1 * 1536 + threadIdx_x * 4 + 4] = A_1[blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + k_0_fused * 16 + threadIdx_x % 4 * 4 + 48:blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + k_0_fused * 16 + threadIdx_x % 4 * 4 + 48 + 4]
                    A_shared_1[cse_var_1 * 1536 + threadIdx_x * 4 + 256:cse_var_1 * 1536 + threadIdx_x * 4 + 256 + 4] = A_1[blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + k_0_fused * 16 + threadIdx_x % 4 * 4 + 24624:blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + k_0_fused * 16 + threadIdx_x % 4 * 4 + 24624 + 4]
                    A_shared_1[cse_var_1 * 1536 + threadIdx_x * 4 + 512:cse_var_1 * 1536 + threadIdx_x * 4 + 512 + 4] = A_1[blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + k_0_fused * 16 + threadIdx_x % 4 * 4 + 49200:blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + k_0_fused * 16 + threadIdx_x % 4 * 4 + 49200 + 4]
                    A_shared_1[cse_var_1 * 1536 + threadIdx_x * 4 + 768:cse_var_1 * 1536 + threadIdx_x * 4 + 768 + 4] = A_1[blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + k_0_fused * 16 + threadIdx_x % 4 * 4 + 73776:blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + k_0_fused * 16 + threadIdx_x % 4 * 4 + 73776 + 4]
                    A_shared_1[cse_var_1 * 1536 + threadIdx_x * 4 + 1024:cse_var_1 * 1536 + threadIdx_x * 4 + 1024 + 4] = A_1[blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + k_0_fused * 16 + threadIdx_x % 4 * 4 + 98352:blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + k_0_fused * 16 + threadIdx_x % 4 * 4 + 98352 + 4]
                    A_shared_1[cse_var_1 * 1536 + threadIdx_x * 4 + 1280:cse_var_1 * 1536 + threadIdx_x * 4 + 1280 + 4] = A_1[blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + k_0_fused * 16 + threadIdx_x % 4 * 4 + 122928:blockIdx_x // 24 * 147456 + threadIdx_x // 4 * 1536 + k_0_fused * 16 + threadIdx_x % 4 * 4 + 122928 + 4]
                T.attr(0, "async_scope", 1)
                B_shared_1[cse_var_1 * 1024 + threadIdx_x * 4:cse_var_1 * 1024 + threadIdx_x * 4 + 4] = B_1[k_0_fused * 24576 + threadIdx_x // 16 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 16 * 4 + 73728:k_0_fused * 24576 + threadIdx_x // 16 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 16 * 4 + 73728 + 4]
                B_shared_1[cse_var_1 * 1024 + threadIdx_x * 4 + 256:cse_var_1 * 1024 + threadIdx_x * 4 + 256 + 4] = B_1[k_0_fused * 24576 + threadIdx_x // 16 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 16 * 4 + 79872:k_0_fused * 24576 + threadIdx_x // 16 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 16 * 4 + 79872 + 4]
                B_shared_1[cse_var_1 * 1024 + threadIdx_x * 4 + 512:cse_var_1 * 1024 + threadIdx_x * 4 + 512 + 4] = B_1[k_0_fused * 24576 + threadIdx_x // 16 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 16 * 4 + 86016:k_0_fused * 24576 + threadIdx_x // 16 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 16 * 4 + 86016 + 4]
                B_shared_1[cse_var_1 * 1024 + threadIdx_x * 4 + 768:cse_var_1 * 1024 + threadIdx_x * 4 + 768 + 4] = B_1[k_0_fused * 24576 + threadIdx_x // 16 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 16 * 4 + 92160:k_0_fused * 24576 + threadIdx_x // 16 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 16 * 4 + 92160 + 4]
            T.attr(0, "async_wait_queue_scope", 0)
            T.attr(0, "async_wait_inflight_count", 3)
            for k_1, j_3, k_2 in T.grid(4, 2, 4):
                cse_var_49: T.int32 = k_0_fused % 4
                cse_var_48: T.int32 = j_3 + 94
                cse_var_47: T.int32 = j_3 + 92
                cse_var_46: T.int32 = j_3 + 90
                cse_var_45: T.int32 = j_3 + 88
                cse_var_44: T.int32 = j_3 + 86
                cse_var_43: T.int32 = j_3 + 84
                cse_var_42: T.int32 = j_3 + 82
                cse_var_41: T.int32 = j_3 + 80
                cse_var_40: T.int32 = j_3 + 8
                cse_var_39: T.int32 = j_3 + 78
                cse_var_38: T.int32 = j_3 + 76
                cse_var_37: T.int32 = j_3 + 74
                cse_var_36: T.int32 = j_3 + 72
                cse_var_35: T.int32 = j_3 + 70
                cse_var_34: T.int32 = j_3 + 68
                cse_var_33: T.int32 = j_3 + 66
                cse_var_32: T.int32 = j_3 + 64
                cse_var_31: T.int32 = j_3 + 62
                cse_var_30: T.int32 = j_3 + 60
                cse_var_29: T.int32 = j_3 + 6
                cse_var_28: T.int32 = j_3 + 58
                cse_var_27: T.int32 = j_3 + 56
                cse_var_26: T.int32 = j_3 + 54
                cse_var_25: T.int32 = j_3 + 52
                cse_var_24: T.int32 = j_3 + 50
                cse_var_23: T.int32 = j_3 + 48
                cse_var_22: T.int32 = j_3 + 46
                cse_var_21: T.int32 = j_3 + 44
                cse_var_20: T.int32 = j_3 + 42
                cse_var_19: T.int32 = j_3 + 40
                cse_var_18: T.int32 = j_3 + 4
                cse_var_17: T.int32 = j_3 + 38
                cse_var_16: T.int32 = j_3 + 36
                cse_var_15: T.int32 = j_3 + 34
                cse_var_14: T.int32 = j_3 + 32
                cse_var_13: T.int32 = j_3 + 30
                cse_var_12: T.int32 = j_3 + 28
                cse_var_11: T.int32 = j_3 + 26
                cse_var_10: T.int32 = j_3 + 24
                cse_var_9: T.int32 = j_3 + 22
                cse_var_8: T.int32 = j_3 + 20
                cse_var_7: T.int32 = j_3 + 2
                cse_var_6: T.int32 = j_3 + 18
                cse_var_5: T.int32 = j_3 + 16
                cse_var_4: T.int32 = j_3 + 14
                cse_var_3: T.int32 = j_3 + 12
                cse_var_2: T.int32 = j_3 + 10
                Y_local_1[j_3] = Y_local_1[j_3] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3]
                Y_local_1[cse_var_29] = Y_local_1[cse_var_29] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 16]
                Y_local_1[cse_var_3] = Y_local_1[cse_var_3] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 32]
                Y_local_1[cse_var_6] = Y_local_1[cse_var_6] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 48]
                Y_local_1[cse_var_10] = Y_local_1[cse_var_10] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 384] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3]
                Y_local_1[cse_var_13] = Y_local_1[cse_var_13] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 384] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 16]
                Y_local_1[cse_var_16] = Y_local_1[cse_var_16] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 384] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 32]
                Y_local_1[cse_var_20] = Y_local_1[cse_var_20] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 384] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 48]
                Y_local_1[cse_var_23] = Y_local_1[cse_var_23] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 768] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3]
                Y_local_1[cse_var_26] = Y_local_1[cse_var_26] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 768] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 16]
                Y_local_1[cse_var_30] = Y_local_1[cse_var_30] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 768] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 32]
                Y_local_1[cse_var_33] = Y_local_1[cse_var_33] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 768] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 48]
                Y_local_1[cse_var_36] = Y_local_1[cse_var_36] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1152] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3]
                Y_local_1[cse_var_39] = Y_local_1[cse_var_39] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1152] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 16]
                Y_local_1[cse_var_43] = Y_local_1[cse_var_43] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1152] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 32]
                Y_local_1[cse_var_46] = Y_local_1[cse_var_46] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1152] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 48]
                Y_local_1[cse_var_7] = Y_local_1[cse_var_7] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 16] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3]
                Y_local_1[cse_var_40] = Y_local_1[cse_var_40] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 16] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 16]
                Y_local_1[cse_var_4] = Y_local_1[cse_var_4] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 16] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 32]
                Y_local_1[cse_var_8] = Y_local_1[cse_var_8] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 16] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 48]
                Y_local_1[cse_var_11] = Y_local_1[cse_var_11] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 400] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3]
                Y_local_1[cse_var_14] = Y_local_1[cse_var_14] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 400] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 16]
                Y_local_1[cse_var_17] = Y_local_1[cse_var_17] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 400] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 32]
                Y_local_1[cse_var_21] = Y_local_1[cse_var_21] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 400] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 48]
                Y_local_1[cse_var_24] = Y_local_1[cse_var_24] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 784] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3]
                Y_local_1[cse_var_27] = Y_local_1[cse_var_27] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 784] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 16]
                Y_local_1[cse_var_31] = Y_local_1[cse_var_31] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 784] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 32]
                Y_local_1[cse_var_34] = Y_local_1[cse_var_34] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 784] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 48]
                Y_local_1[cse_var_37] = Y_local_1[cse_var_37] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1168] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3]
                Y_local_1[cse_var_41] = Y_local_1[cse_var_41] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1168] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 16]
                Y_local_1[cse_var_44] = Y_local_1[cse_var_44] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1168] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 32]
                Y_local_1[cse_var_47] = Y_local_1[cse_var_47] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1168] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 48]
                Y_local_1[cse_var_18] = Y_local_1[cse_var_18] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 32] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3]
                Y_local_1[cse_var_2] = Y_local_1[cse_var_2] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 32] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 16]
                Y_local_1[cse_var_5] = Y_local_1[cse_var_5] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 32] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 32]
                Y_local_1[cse_var_9] = Y_local_1[cse_var_9] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 32] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 48]
                Y_local_1[cse_var_12] = Y_local_1[cse_var_12] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 416] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3]
                Y_local_1[cse_var_15] = Y_local_1[cse_var_15] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 416] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 16]
                Y_local_1[cse_var_19] = Y_local_1[cse_var_19] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 416] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 32]
                Y_local_1[cse_var_22] = Y_local_1[cse_var_22] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 416] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 48]
                Y_local_1[cse_var_25] = Y_local_1[cse_var_25] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 800] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3]
                Y_local_1[cse_var_28] = Y_local_1[cse_var_28] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 800] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 16]
                Y_local_1[cse_var_32] = Y_local_1[cse_var_32] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 800] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 32]
                Y_local_1[cse_var_35] = Y_local_1[cse_var_35] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 800] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 48]
                Y_local_1[cse_var_38] = Y_local_1[cse_var_38] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1184] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3]
                Y_local_1[cse_var_42] = Y_local_1[cse_var_42] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1184] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 16]
                Y_local_1[cse_var_45] = Y_local_1[cse_var_45] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1184] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 32]
                Y_local_1[cse_var_48] = Y_local_1[cse_var_48] + A_shared_1[cse_var_49 * 1536 + threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1184] * B_shared_1[cse_var_49 * 1024 + k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 48]
        with T.attr(0, "async_wait_queue_scope", 0):
            T.attr(0, "async_wait_inflight_count", 2)
            for k_1, j_3, k_2 in T.grid(4, 2, 4):
                cse_var_96: T.int32 = j_3 + 94
                cse_var_95: T.int32 = j_3 + 92
                cse_var_94: T.int32 = j_3 + 90
                cse_var_93: T.int32 = j_3 + 88
                cse_var_92: T.int32 = j_3 + 86
                cse_var_91: T.int32 = j_3 + 84
                cse_var_90: T.int32 = j_3 + 82
                cse_var_89: T.int32 = j_3 + 80
                cse_var_88: T.int32 = j_3 + 8
                cse_var_87: T.int32 = j_3 + 78
                cse_var_86: T.int32 = j_3 + 76
                cse_var_85: T.int32 = j_3 + 74
                cse_var_84: T.int32 = j_3 + 72
                cse_var_83: T.int32 = j_3 + 70
                cse_var_82: T.int32 = j_3 + 68
                cse_var_81: T.int32 = j_3 + 66
                cse_var_80: T.int32 = j_3 + 64
                cse_var_79: T.int32 = j_3 + 62
                cse_var_78: T.int32 = j_3 + 60
                cse_var_77: T.int32 = j_3 + 6
                cse_var_76: T.int32 = j_3 + 58
                cse_var_75: T.int32 = j_3 + 56
                cse_var_74: T.int32 = j_3 + 54
                cse_var_73: T.int32 = j_3 + 52
                cse_var_72: T.int32 = j_3 + 50
                cse_var_71: T.int32 = j_3 + 48
                cse_var_70: T.int32 = j_3 + 46
                cse_var_69: T.int32 = j_3 + 44
                cse_var_68: T.int32 = j_3 + 42
                cse_var_67: T.int32 = j_3 + 40
                cse_var_66: T.int32 = j_3 + 4
                cse_var_65: T.int32 = j_3 + 38
                cse_var_64: T.int32 = j_3 + 36
                cse_var_63: T.int32 = j_3 + 34
                cse_var_62: T.int32 = j_3 + 32
                cse_var_61: T.int32 = j_3 + 30
                cse_var_60: T.int32 = j_3 + 28
                cse_var_59: T.int32 = j_3 + 26
                cse_var_58: T.int32 = j_3 + 24
                cse_var_57: T.int32 = j_3 + 22
                cse_var_56: T.int32 = j_3 + 20
                cse_var_55: T.int32 = j_3 + 2
                cse_var_54: T.int32 = j_3 + 18
                cse_var_53: T.int32 = j_3 + 16
                cse_var_52: T.int32 = j_3 + 14
                cse_var_51: T.int32 = j_3 + 12
                cse_var_50: T.int32 = j_3 + 10
                Y_local_1[j_3] = Y_local_1[j_3] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1536] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1024]
                Y_local_1[cse_var_77] = Y_local_1[cse_var_77] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1536] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1040]
                Y_local_1[cse_var_51] = Y_local_1[cse_var_51] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1536] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1056]
                Y_local_1[cse_var_54] = Y_local_1[cse_var_54] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1536] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1072]
                Y_local_1[cse_var_58] = Y_local_1[cse_var_58] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1920] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1024]
                Y_local_1[cse_var_61] = Y_local_1[cse_var_61] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1920] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1040]
                Y_local_1[cse_var_64] = Y_local_1[cse_var_64] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1920] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1056]
                Y_local_1[cse_var_68] = Y_local_1[cse_var_68] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1920] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1072]
                Y_local_1[cse_var_71] = Y_local_1[cse_var_71] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 2304] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1024]
                Y_local_1[cse_var_74] = Y_local_1[cse_var_74] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 2304] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1040]
                Y_local_1[cse_var_78] = Y_local_1[cse_var_78] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 2304] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1056]
                Y_local_1[cse_var_81] = Y_local_1[cse_var_81] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 2304] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1072]
                Y_local_1[cse_var_84] = Y_local_1[cse_var_84] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 2688] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1024]
                Y_local_1[cse_var_87] = Y_local_1[cse_var_87] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 2688] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1040]
                Y_local_1[cse_var_91] = Y_local_1[cse_var_91] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 2688] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1056]
                Y_local_1[cse_var_94] = Y_local_1[cse_var_94] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 2688] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1072]
                Y_local_1[cse_var_55] = Y_local_1[cse_var_55] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1552] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1024]
                Y_local_1[cse_var_88] = Y_local_1[cse_var_88] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1552] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1040]
                Y_local_1[cse_var_52] = Y_local_1[cse_var_52] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1552] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1056]
                Y_local_1[cse_var_56] = Y_local_1[cse_var_56] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1552] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1072]
                Y_local_1[cse_var_59] = Y_local_1[cse_var_59] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1936] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1024]
                Y_local_1[cse_var_62] = Y_local_1[cse_var_62] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1936] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1040]
                Y_local_1[cse_var_65] = Y_local_1[cse_var_65] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1936] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1056]
                Y_local_1[cse_var_69] = Y_local_1[cse_var_69] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1936] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1072]
                Y_local_1[cse_var_72] = Y_local_1[cse_var_72] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 2320] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1024]
                Y_local_1[cse_var_75] = Y_local_1[cse_var_75] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 2320] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1040]
                Y_local_1[cse_var_79] = Y_local_1[cse_var_79] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 2320] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1056]
                Y_local_1[cse_var_82] = Y_local_1[cse_var_82] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 2320] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1072]
                Y_local_1[cse_var_85] = Y_local_1[cse_var_85] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 2704] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1024]
                Y_local_1[cse_var_89] = Y_local_1[cse_var_89] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 2704] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1040]
                Y_local_1[cse_var_92] = Y_local_1[cse_var_92] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 2704] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1056]
                Y_local_1[cse_var_95] = Y_local_1[cse_var_95] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 2704] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1072]
                Y_local_1[cse_var_66] = Y_local_1[cse_var_66] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1568] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1024]
                Y_local_1[cse_var_50] = Y_local_1[cse_var_50] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1568] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1040]
                Y_local_1[cse_var_53] = Y_local_1[cse_var_53] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1568] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1056]
                Y_local_1[cse_var_57] = Y_local_1[cse_var_57] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1568] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1072]
                Y_local_1[cse_var_60] = Y_local_1[cse_var_60] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1952] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1024]
                Y_local_1[cse_var_63] = Y_local_1[cse_var_63] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1952] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1040]
                Y_local_1[cse_var_67] = Y_local_1[cse_var_67] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1952] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1056]
                Y_local_1[cse_var_70] = Y_local_1[cse_var_70] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 1952] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1072]
                Y_local_1[cse_var_73] = Y_local_1[cse_var_73] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 2336] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1024]
                Y_local_1[cse_var_76] = Y_local_1[cse_var_76] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 2336] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1040]
                Y_local_1[cse_var_80] = Y_local_1[cse_var_80] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 2336] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1056]
                Y_local_1[cse_var_83] = Y_local_1[cse_var_83] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 2336] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1072]
                Y_local_1[cse_var_86] = Y_local_1[cse_var_86] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 2720] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1024]
                Y_local_1[cse_var_90] = Y_local_1[cse_var_90] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 2720] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1040]
                Y_local_1[cse_var_93] = Y_local_1[cse_var_93] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 2720] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1056]
                Y_local_1[cse_var_96] = Y_local_1[cse_var_96] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 2720] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 1072]
        with T.attr(0, "async_wait_queue_scope", 0):
            T.attr(0, "async_wait_inflight_count", 1)
            for k_1, j_3, k_2 in T.grid(4, 2, 4):
                cse_var_143: T.int32 = j_3 + 94
                cse_var_142: T.int32 = j_3 + 92
                cse_var_141: T.int32 = j_3 + 90
                cse_var_140: T.int32 = j_3 + 88
                cse_var_139: T.int32 = j_3 + 86
                cse_var_138: T.int32 = j_3 + 84
                cse_var_137: T.int32 = j_3 + 82
                cse_var_136: T.int32 = j_3 + 80
                cse_var_135: T.int32 = j_3 + 8
                cse_var_134: T.int32 = j_3 + 78
                cse_var_133: T.int32 = j_3 + 76
                cse_var_132: T.int32 = j_3 + 74
                cse_var_131: T.int32 = j_3 + 72
                cse_var_130: T.int32 = j_3 + 70
                cse_var_129: T.int32 = j_3 + 68
                cse_var_128: T.int32 = j_3 + 66
                cse_var_127: T.int32 = j_3 + 64
                cse_var_126: T.int32 = j_3 + 62
                cse_var_125: T.int32 = j_3 + 60
                cse_var_124: T.int32 = j_3 + 6
                cse_var_123: T.int32 = j_3 + 58
                cse_var_122: T.int32 = j_3 + 56
                cse_var_121: T.int32 = j_3 + 54
                cse_var_120: T.int32 = j_3 + 52
                cse_var_119: T.int32 = j_3 + 50
                cse_var_118: T.int32 = j_3 + 48
                cse_var_117: T.int32 = j_3 + 46
                cse_var_116: T.int32 = j_3 + 44
                cse_var_115: T.int32 = j_3 + 42
                cse_var_114: T.int32 = j_3 + 40
                cse_var_113: T.int32 = j_3 + 4
                cse_var_112: T.int32 = j_3 + 38
                cse_var_111: T.int32 = j_3 + 36
                cse_var_110: T.int32 = j_3 + 34
                cse_var_109: T.int32 = j_3 + 32
                cse_var_108: T.int32 = j_3 + 30
                cse_var_107: T.int32 = j_3 + 28
                cse_var_106: T.int32 = j_3 + 26
                cse_var_105: T.int32 = j_3 + 24
                cse_var_104: T.int32 = j_3 + 22
                cse_var_103: T.int32 = j_3 + 20
                cse_var_102: T.int32 = j_3 + 2
                cse_var_101: T.int32 = j_3 + 18
                cse_var_100: T.int32 = j_3 + 16
                cse_var_99: T.int32 = j_3 + 14
                cse_var_98: T.int32 = j_3 + 12
                cse_var_97: T.int32 = j_3 + 10
                Y_local_1[j_3] = Y_local_1[j_3] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3072] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2048]
                Y_local_1[cse_var_124] = Y_local_1[cse_var_124] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3072] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2064]
                Y_local_1[cse_var_98] = Y_local_1[cse_var_98] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3072] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2080]
                Y_local_1[cse_var_101] = Y_local_1[cse_var_101] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3072] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2096]
                Y_local_1[cse_var_105] = Y_local_1[cse_var_105] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3456] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2048]
                Y_local_1[cse_var_108] = Y_local_1[cse_var_108] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3456] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2064]
                Y_local_1[cse_var_111] = Y_local_1[cse_var_111] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3456] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2080]
                Y_local_1[cse_var_115] = Y_local_1[cse_var_115] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3456] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2096]
                Y_local_1[cse_var_118] = Y_local_1[cse_var_118] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3840] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2048]
                Y_local_1[cse_var_121] = Y_local_1[cse_var_121] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3840] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2064]
                Y_local_1[cse_var_125] = Y_local_1[cse_var_125] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3840] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2080]
                Y_local_1[cse_var_128] = Y_local_1[cse_var_128] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3840] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2096]
                Y_local_1[cse_var_131] = Y_local_1[cse_var_131] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 4224] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2048]
                Y_local_1[cse_var_134] = Y_local_1[cse_var_134] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 4224] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2064]
                Y_local_1[cse_var_138] = Y_local_1[cse_var_138] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 4224] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2080]
                Y_local_1[cse_var_141] = Y_local_1[cse_var_141] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 4224] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2096]
                Y_local_1[cse_var_102] = Y_local_1[cse_var_102] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3088] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2048]
                Y_local_1[cse_var_135] = Y_local_1[cse_var_135] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3088] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2064]
                Y_local_1[cse_var_99] = Y_local_1[cse_var_99] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3088] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2080]
                Y_local_1[cse_var_103] = Y_local_1[cse_var_103] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3088] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2096]
                Y_local_1[cse_var_106] = Y_local_1[cse_var_106] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3472] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2048]
                Y_local_1[cse_var_109] = Y_local_1[cse_var_109] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3472] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2064]
                Y_local_1[cse_var_112] = Y_local_1[cse_var_112] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3472] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2080]
                Y_local_1[cse_var_116] = Y_local_1[cse_var_116] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3472] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2096]
                Y_local_1[cse_var_119] = Y_local_1[cse_var_119] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3856] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2048]
                Y_local_1[cse_var_122] = Y_local_1[cse_var_122] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3856] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2064]
                Y_local_1[cse_var_126] = Y_local_1[cse_var_126] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3856] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2080]
                Y_local_1[cse_var_129] = Y_local_1[cse_var_129] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3856] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2096]
                Y_local_1[cse_var_132] = Y_local_1[cse_var_132] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 4240] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2048]
                Y_local_1[cse_var_136] = Y_local_1[cse_var_136] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 4240] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2064]
                Y_local_1[cse_var_139] = Y_local_1[cse_var_139] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 4240] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2080]
                Y_local_1[cse_var_142] = Y_local_1[cse_var_142] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 4240] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2096]
                Y_local_1[cse_var_113] = Y_local_1[cse_var_113] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3104] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2048]
                Y_local_1[cse_var_97] = Y_local_1[cse_var_97] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3104] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2064]
                Y_local_1[cse_var_100] = Y_local_1[cse_var_100] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3104] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2080]
                Y_local_1[cse_var_104] = Y_local_1[cse_var_104] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3104] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2096]
                Y_local_1[cse_var_107] = Y_local_1[cse_var_107] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3488] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2048]
                Y_local_1[cse_var_110] = Y_local_1[cse_var_110] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3488] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2064]
                Y_local_1[cse_var_114] = Y_local_1[cse_var_114] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3488] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2080]
                Y_local_1[cse_var_117] = Y_local_1[cse_var_117] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3488] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2096]
                Y_local_1[cse_var_120] = Y_local_1[cse_var_120] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3872] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2048]
                Y_local_1[cse_var_123] = Y_local_1[cse_var_123] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3872] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2064]
                Y_local_1[cse_var_127] = Y_local_1[cse_var_127] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3872] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2080]
                Y_local_1[cse_var_130] = Y_local_1[cse_var_130] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 3872] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2096]
                Y_local_1[cse_var_133] = Y_local_1[cse_var_133] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 4256] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2048]
                Y_local_1[cse_var_137] = Y_local_1[cse_var_137] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 4256] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2064]
                Y_local_1[cse_var_140] = Y_local_1[cse_var_140] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 4256] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2080]
                Y_local_1[cse_var_143] = Y_local_1[cse_var_143] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 4256] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 2096]
        with T.attr(0, "async_wait_queue_scope", 0):
            T.attr(0, "async_wait_inflight_count", 0)
            for k_1, j_3, k_2 in T.grid(4, 2, 4):
                cse_var_190: T.int32 = j_3 + 94
                cse_var_189: T.int32 = j_3 + 92
                cse_var_188: T.int32 = j_3 + 90
                cse_var_187: T.int32 = j_3 + 88
                cse_var_186: T.int32 = j_3 + 86
                cse_var_185: T.int32 = j_3 + 84
                cse_var_184: T.int32 = j_3 + 82
                cse_var_183: T.int32 = j_3 + 80
                cse_var_182: T.int32 = j_3 + 8
                cse_var_181: T.int32 = j_3 + 78
                cse_var_180: T.int32 = j_3 + 76
                cse_var_179: T.int32 = j_3 + 74
                cse_var_178: T.int32 = j_3 + 72
                cse_var_177: T.int32 = j_3 + 70
                cse_var_176: T.int32 = j_3 + 68
                cse_var_175: T.int32 = j_3 + 66
                cse_var_174: T.int32 = j_3 + 64
                cse_var_173: T.int32 = j_3 + 62
                cse_var_172: T.int32 = j_3 + 60
                cse_var_171: T.int32 = j_3 + 6
                cse_var_170: T.int32 = j_3 + 58
                cse_var_169: T.int32 = j_3 + 56
                cse_var_168: T.int32 = j_3 + 54
                cse_var_167: T.int32 = j_3 + 52
                cse_var_166: T.int32 = j_3 + 50
                cse_var_165: T.int32 = j_3 + 48
                cse_var_164: T.int32 = j_3 + 46
                cse_var_163: T.int32 = j_3 + 44
                cse_var_162: T.int32 = j_3 + 42
                cse_var_161: T.int32 = j_3 + 40
                cse_var_160: T.int32 = j_3 + 4
                cse_var_159: T.int32 = j_3 + 38
                cse_var_158: T.int32 = j_3 + 36
                cse_var_157: T.int32 = j_3 + 34
                cse_var_156: T.int32 = j_3 + 32
                cse_var_155: T.int32 = j_3 + 30
                cse_var_154: T.int32 = j_3 + 28
                cse_var_153: T.int32 = j_3 + 26
                cse_var_152: T.int32 = j_3 + 24
                cse_var_151: T.int32 = j_3 + 22
                cse_var_150: T.int32 = j_3 + 20
                cse_var_149: T.int32 = j_3 + 2
                cse_var_148: T.int32 = j_3 + 18
                cse_var_147: T.int32 = j_3 + 16
                cse_var_146: T.int32 = j_3 + 14
                cse_var_145: T.int32 = j_3 + 12
                cse_var_144: T.int32 = j_3 + 10
                Y_local_1[j_3] = Y_local_1[j_3] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 4608] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3072]
                Y_local_1[cse_var_171] = Y_local_1[cse_var_171] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 4608] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3088]
                Y_local_1[cse_var_145] = Y_local_1[cse_var_145] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 4608] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3104]
                Y_local_1[cse_var_148] = Y_local_1[cse_var_148] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 4608] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3120]
                Y_local_1[cse_var_152] = Y_local_1[cse_var_152] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 4992] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3072]
                Y_local_1[cse_var_155] = Y_local_1[cse_var_155] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 4992] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3088]
                Y_local_1[cse_var_158] = Y_local_1[cse_var_158] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 4992] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3104]
                Y_local_1[cse_var_162] = Y_local_1[cse_var_162] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 4992] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3120]
                Y_local_1[cse_var_165] = Y_local_1[cse_var_165] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 5376] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3072]
                Y_local_1[cse_var_168] = Y_local_1[cse_var_168] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 5376] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3088]
                Y_local_1[cse_var_172] = Y_local_1[cse_var_172] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 5376] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3104]
                Y_local_1[cse_var_175] = Y_local_1[cse_var_175] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 5376] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3120]
                Y_local_1[cse_var_178] = Y_local_1[cse_var_178] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 5760] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3072]
                Y_local_1[cse_var_181] = Y_local_1[cse_var_181] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 5760] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3088]
                Y_local_1[cse_var_185] = Y_local_1[cse_var_185] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 5760] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3104]
                Y_local_1[cse_var_188] = Y_local_1[cse_var_188] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 5760] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3120]
                Y_local_1[cse_var_149] = Y_local_1[cse_var_149] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 4624] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3072]
                Y_local_1[cse_var_182] = Y_local_1[cse_var_182] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 4624] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3088]
                Y_local_1[cse_var_146] = Y_local_1[cse_var_146] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 4624] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3104]
                Y_local_1[cse_var_150] = Y_local_1[cse_var_150] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 4624] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3120]
                Y_local_1[cse_var_153] = Y_local_1[cse_var_153] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 5008] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3072]
                Y_local_1[cse_var_156] = Y_local_1[cse_var_156] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 5008] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3088]
                Y_local_1[cse_var_159] = Y_local_1[cse_var_159] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 5008] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3104]
                Y_local_1[cse_var_163] = Y_local_1[cse_var_163] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 5008] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3120]
                Y_local_1[cse_var_166] = Y_local_1[cse_var_166] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 5392] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3072]
                Y_local_1[cse_var_169] = Y_local_1[cse_var_169] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 5392] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3088]
                Y_local_1[cse_var_173] = Y_local_1[cse_var_173] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 5392] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3104]
                Y_local_1[cse_var_176] = Y_local_1[cse_var_176] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 5392] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3120]
                Y_local_1[cse_var_179] = Y_local_1[cse_var_179] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 5776] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3072]
                Y_local_1[cse_var_183] = Y_local_1[cse_var_183] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 5776] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3088]
                Y_local_1[cse_var_186] = Y_local_1[cse_var_186] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 5776] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3104]
                Y_local_1[cse_var_189] = Y_local_1[cse_var_189] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 5776] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3120]
                Y_local_1[cse_var_160] = Y_local_1[cse_var_160] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 4640] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3072]
                Y_local_1[cse_var_144] = Y_local_1[cse_var_144] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 4640] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3088]
                Y_local_1[cse_var_147] = Y_local_1[cse_var_147] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 4640] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3104]
                Y_local_1[cse_var_151] = Y_local_1[cse_var_151] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 4640] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3120]
                Y_local_1[cse_var_154] = Y_local_1[cse_var_154] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 5024] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3072]
                Y_local_1[cse_var_157] = Y_local_1[cse_var_157] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 5024] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3088]
                Y_local_1[cse_var_161] = Y_local_1[cse_var_161] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 5024] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3104]
                Y_local_1[cse_var_164] = Y_local_1[cse_var_164] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 5024] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3120]
                Y_local_1[cse_var_167] = Y_local_1[cse_var_167] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 5408] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3072]
                Y_local_1[cse_var_170] = Y_local_1[cse_var_170] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 5408] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3088]
                Y_local_1[cse_var_174] = Y_local_1[cse_var_174] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 5408] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3104]
                Y_local_1[cse_var_177] = Y_local_1[cse_var_177] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 5408] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3120]
                Y_local_1[cse_var_180] = Y_local_1[cse_var_180] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 5792] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3072]
                Y_local_1[cse_var_184] = Y_local_1[cse_var_184] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 5792] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3088]
                Y_local_1[cse_var_187] = Y_local_1[cse_var_187] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 5792] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3104]
                Y_local_1[cse_var_190] = Y_local_1[cse_var_190] + A_shared_1[threadIdx_x // 8 * 48 + k_1 * 4 + k_2 + 5792] * B_shared_1[k_1 * 256 + k_2 * 64 + threadIdx_x % 8 * 2 + j_3 + 3120]
        for ax0 in T.serial(3):
            cse_var_191: T.int32 = ax0 * 2
            Y_1[blockIdx_x // 24 * 147456 + threadIdx_x // 8 * 4608 + ax0 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 8 * 2] = Y_local_1[cse_var_191]
            Y_1[blockIdx_x // 24 * 147456 + threadIdx_x // 8 * 4608 + ax0 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 8 * 2 + 16] = Y_local_1[cse_var_191 + 6]
            Y_1[blockIdx_x // 24 * 147456 + threadIdx_x // 8 * 4608 + ax0 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 8 * 2 + 32] = Y_local_1[cse_var_191 + 12]
            Y_1[blockIdx_x // 24 * 147456 + threadIdx_x // 8 * 4608 + ax0 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 8 * 2 + 48] = Y_local_1[cse_var_191 + 18]
            Y_1[blockIdx_x // 24 * 147456 + threadIdx_x // 8 * 4608 + ax0 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 8 * 2 + 36864] = Y_local_1[cse_var_191 + 24]
            Y_1[blockIdx_x // 24 * 147456 + threadIdx_x // 8 * 4608 + ax0 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 8 * 2 + 36880] = Y_local_1[cse_var_191 + 30]
            Y_1[blockIdx_x // 24 * 147456 + threadIdx_x // 8 * 4608 + ax0 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 8 * 2 + 36896] = Y_local_1[cse_var_191 + 36]
            Y_1[blockIdx_x // 24 * 147456 + threadIdx_x // 8 * 4608 + ax0 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 8 * 2 + 36912] = Y_local_1[cse_var_191 + 42]
            Y_1[blockIdx_x // 24 * 147456 + threadIdx_x // 8 * 4608 + ax0 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 8 * 2 + 73728] = Y_local_1[cse_var_191 + 48]
            Y_1[blockIdx_x // 24 * 147456 + threadIdx_x // 8 * 4608 + ax0 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 8 * 2 + 73744] = Y_local_1[cse_var_191 + 54]
            Y_1[blockIdx_x // 24 * 147456 + threadIdx_x // 8 * 4608 + ax0 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 8 * 2 + 73760] = Y_local_1[cse_var_191 + 60]
            Y_1[blockIdx_x // 24 * 147456 + threadIdx_x // 8 * 4608 + ax0 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 8 * 2 + 73776] = Y_local_1[cse_var_191 + 66]
            Y_1[blockIdx_x // 24 * 147456 + threadIdx_x // 8 * 4608 + ax0 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 8 * 2 + 110592] = Y_local_1[cse_var_191 + 72]
            Y_1[blockIdx_x // 24 * 147456 + threadIdx_x // 8 * 4608 + ax0 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 8 * 2 + 110608] = Y_local_1[cse_var_191 + 78]
            Y_1[blockIdx_x // 24 * 147456 + threadIdx_x // 8 * 4608 + ax0 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 8 * 2 + 110624] = Y_local_1[cse_var_191 + 84]
            Y_1[blockIdx_x // 24 * 147456 + threadIdx_x // 8 * 4608 + ax0 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 8 * 2 + 110640] = Y_local_1[cse_var_191 + 90]
            Y_1[blockIdx_x // 24 * 147456 + threadIdx_x // 8 * 4608 + ax0 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 8 * 2 + 1] = Y_local_1[cse_var_191 + 1]
            Y_1[blockIdx_x // 24 * 147456 + threadIdx_x // 8 * 4608 + ax0 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 8 * 2 + 17] = Y_local_1[cse_var_191 + 7]
            Y_1[blockIdx_x // 24 * 147456 + threadIdx_x // 8 * 4608 + ax0 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 8 * 2 + 33] = Y_local_1[cse_var_191 + 13]
            Y_1[blockIdx_x // 24 * 147456 + threadIdx_x // 8 * 4608 + ax0 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 8 * 2 + 49] = Y_local_1[cse_var_191 + 19]
            Y_1[blockIdx_x // 24 * 147456 + threadIdx_x // 8 * 4608 + ax0 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 8 * 2 + 36865] = Y_local_1[cse_var_191 + 25]
            Y_1[blockIdx_x // 24 * 147456 + threadIdx_x // 8 * 4608 + ax0 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 8 * 2 + 36881] = Y_local_1[cse_var_191 + 31]
            Y_1[blockIdx_x // 24 * 147456 + threadIdx_x // 8 * 4608 + ax0 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 8 * 2 + 36897] = Y_local_1[cse_var_191 + 37]
            Y_1[blockIdx_x // 24 * 147456 + threadIdx_x // 8 * 4608 + ax0 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 8 * 2 + 36913] = Y_local_1[cse_var_191 + 43]
            Y_1[blockIdx_x // 24 * 147456 + threadIdx_x // 8 * 4608 + ax0 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 8 * 2 + 73729] = Y_local_1[cse_var_191 + 49]
            Y_1[blockIdx_x // 24 * 147456 + threadIdx_x // 8 * 4608 + ax0 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 8 * 2 + 73745] = Y_local_1[cse_var_191 + 55]
            Y_1[blockIdx_x // 24 * 147456 + threadIdx_x // 8 * 4608 + ax0 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 8 * 2 + 73761] = Y_local_1[cse_var_191 + 61]
            Y_1[blockIdx_x // 24 * 147456 + threadIdx_x // 8 * 4608 + ax0 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 8 * 2 + 73777] = Y_local_1[cse_var_191 + 67]
            Y_1[blockIdx_x // 24 * 147456 + threadIdx_x // 8 * 4608 + ax0 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 8 * 2 + 110593] = Y_local_1[cse_var_191 + 73]
            Y_1[blockIdx_x // 24 * 147456 + threadIdx_x // 8 * 4608 + ax0 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 8 * 2 + 110609] = Y_local_1[cse_var_191 + 79]
            Y_1[blockIdx_x // 24 * 147456 + threadIdx_x // 8 * 4608 + ax0 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 8 * 2 + 110625] = Y_local_1[cse_var_191 + 85]
            Y_1[blockIdx_x // 24 * 147456 + threadIdx_x // 8 * 4608 + ax0 * 1536 + blockIdx_x % 24 * 64 + threadIdx_x % 8 * 2 + 110641] = Y_local_1[cse_var_191 + 91]
    

